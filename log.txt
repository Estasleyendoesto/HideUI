
Version 0.5:
- Fixed issue with Combat End Delay, now the associated Fade Out is triggered when exiting combat correctly.
- Fixed issue with opacity change after starting the game or using /reload where some frames did not update as expected.
- Fixed issue where targeting/focusing or invoking any frame mid-game did not appear with its assigned opacity.
- Fixed issue where, after starting or /reload and being in a state, the corresponding opacity was not applied.
- Fixed opacity bug with EditBox after FadeOut, as its original alpha is not 1, but 0.44.
- Fixed issue with the Header separators not following the scrollBox.
- Fixed opacity issue with "MainStatusTrackingBarContainer" when starting or /reload.
- Fixed opacity issue with EditBox during FadeIn.
- Fixed opacity issue with focus on EditBox.
- Fixed aesthetic flicker issue when losing focus in chat.
- Fixed issue with tabs reappearing after losing focus.
- Fixed delayed opacity issue when disabling the addon right after enabling it.
- Fixed focus detection issue in editbox with new chat windows.
- Added chat activation/hide feature when pressing "Enter" after sending a message.
- Added text-only mode, activatable from the "Chatbox" frame editing.
- Added auto-activation after checking from the menu.

Version 0.6:
- Created EditboxFrame in AmigableUI.
- Added two new functions to register and unregister third-party frames.
- Data modified; now each frame has a new field called "source."
- FrameInterface modified; each frame will filter if the source is "official."
- Interface modified; added ThirdPartyInterface.
- FrameManager modified; added BindFrame and UnbindFrame functions.
- Created the ThirdPartyInterface module to handle the logic of third-party frames.
- Fixed issue with UpdateUI in FrameInterface.
- Fixed loading issue with textMode on the first game startup.

Version 0.7:
- After almost a month of trial and error, the new base for the interface has been successfully created (Blizzard, you're a pain, no documentation).
- Created Builder.lua and Builder.xml, providing a modern interface, completely independent of Blizzard's interface, and much better, optimized, and understandable than AmigableUI.
- Separated interface modules from logic modules.
- Created new modules for the interface and removed the old ones.

Version 0.8:
- Replaced fadeAmount with fadeDuration, which is more accurate.
- Added new variables in Data (alpha for each event).
- Created the GetDefaults() function in Data.
- Defined the bases for OnUpdate() and UpdateUI().
- Created a confirmation dialog.
- Fixed a bad implementation of checkbox_slider.
- Updated Data to now store the defaults of globals and frames.
- The OnDefault() function can now reset the configuration to its initial state.
- Added a slider for Combat End Delay.
- Implemented a limit on the slider to avoid redundant calls when reaching the minimum or maximum.
- Refactored Data to allow profile switching between profile and character.
- Optimized General by delegating Data responsibilities to Controller.
- Added the Refresh() function to Controller that refreshes modules and the interface.
- Now Controller checks and/or switches profiles when enabling/disabling the addon.
- You can now switch profiles by clicking the checkbox.

Version 0.9:
- Event alphas sliders now work and update correctly.
- Issues to resolve:
    - Too much redundancy in FrameTemplate with event names and state bindings.
    - In OnEventExit() of FrameTemplate, the described function needs to be created.
    - The filter for OnAlphaUpdate() needs refactoring or making it compatible with frames, not just global.
    - The new UpdateStateEvents() function requires refactoring.
    - All changes are related to FrameTemplate, which generally requires refactoring, simplifying logic, and if possible...
    - DO NOT TOUCH FUNCTIONS RELATED TO EVENTS, everything else is fair game.
    - Another persistent issue with Builder sliders, the limit is never the maximum or minimum, needs fixing.
    (*) x -> done
- Created SelectFade() function in FrameTemplate() that chooses the correct Fade based on base and target.
- Consolidated all event names, fields, and amounts into a single MAPPINGS table used by everyone.
- Fixed logic issue with OnEventEnter() and OnEventExit() functions, solved with SelectFade(), and simplified logic.
- Implemented GetPriority() in EventManager.
- Recoded UpdateStateBindings() to use the new MAPPINGS table.
- Renamed CanModifyAlpha() to IsAlphaModifiable().
- Removed COMBAT_END_DELAY from FrameTemplate.
- Now each frame will have a copy of STATE_BINDINGS; a future conflict is expected when sharing the same table.

Version 1.0:
- Renamed FrameTemplate to BaseFrame.
- Renamed Controller to Dispatcher.
- Renamed modules folder to Core.
- Renamed Menu to UIManager.
- Renamed UIFrame to BlizzardFrames.
- Created the Presets folder, which will eventually house presets that users can share to change the behavior of a frame from other addons, under two approaches: 1. tracking and controlling a single frame, 2. tracking and controlling many frames grouped as one.
- Renamed BlizzardFrames to Blizzard.
- Defined base template for Community and Blizzard.
- Added auto-hide feature for ExpandableSection in AddElementToSection in Builder.
- Updated ExpandableSection now has Shutdown() and SwitchOn() functions.
- Created frame creation template by iterating frames in Blizzard.lua.
- Created AttachExtras() function to add additional specific fields to a frame.
- You can now reset Blizzard frames to defaults.
- Completed the Frames category, frames are represented in ExpandableSection(), and adjust their visibility and availability according to Data.
- NOTES:
    - From FrameManager, in BindFrames and BindFrame, there is a filter for Chatbox. The intention is to make it "for all frame containers."
    - Consider adding a new field in Data like "cluster=true," instead of evaluating Chatbox, evaluate if cluster=true.
    - Instead of ChatFrame:Create(), use a base template like Cluster.lua, and ChatFrame will be defined within it.
- Removed STATE_BINDINGS and UpdateStateBindings.
- Simplified logic for updating the amount slider for frames.
- FormatEventName() is now a function of EventManager.
- FrameSettingsUpdate() now filters the event amount slider.
- Changed Blizzard.lua, alpha_checkbox_slider to alpha_slider.
- Removed all references to isAlphaEnabled from frame in BaseFrame, from now on the opacity responsibility is entirely the frame's.
- Completed FrameToggle() in BaseFrame. Basically, all the most important work is done.
- Fixed issue with checkbox_slider and SetExpandableEnabled wrongly enabling the slider when the checkbox is false.
- Fixed issue with FrameToggle() where disabling the frame did not reset events, causing erratic behavior.
- Created the missing SearchBox frame in Builder.lua and Builder.xml.
- Created Community.lua.
- Now disabling the addon disables all elements, sections, and buttons in all subcategories.
- Rebuilt alpha management logic, events, and everything related in BaseFrame, making it simpler in logic and efficiency.
- Renamed BaseFrame to base.
- Created a new model called Cluster, which will contain a group of frames that will act as one.
- Integrated cluster into FrameManager, and resolved new issues found with Base:SetMode().
- Added a 0.18s delay for EventEnter, EventExit, and Refresh in Base to activate opacity change, improving smoothness and transition.
- Added Chatbox.lua module that inherits from Cluster.
- Programmed the extra "Set Text Mode" functionality for Chatbox.
- Fixed "Text Mode" Issues with certain events
- Fixed double call of the fade transition when enabling/disabling the addon.
- Fixed little bug related with mouseover and Text mode
- Multibar 5, 6, and 7 corrected; prefix changed to MultiBar.
- Fixed aesthetic bug in certain events with chatbox text mode.
- Added a new frame.
- Modified the default loading of the database.
- Base function parameters have been renamed to more descriptive names.
- Added experimental solution for community frames.
- Fixed problems with profile change in Data.
- Significantly improved performance by blocking DB calls when UpdateUI() is enabled.